package com.joprovost.r8bemu.graphic;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class TransformTest {

    @Test
    void and() {
        assertSprite(
                Sprite.of(
                        "          ",
                        "  ██      ",
                        "    ██    ",
                        "          ",
                        "          "
                ), Transform.and(Sprite.of(
                        "          ",
                        "  ██  ██  ",
                        "    ██    ",
                        "  ██  ██  ",
                        "          "), Sprite.of(
                        "██████    ",
                        "██████    ",
                        "██████    ",
                        "          ",
                        "          ")
                )
        );
    }

    @Test
    void or() {
        assertSprite(
                Sprite.of(
                        "██████    ",
                        "████████  ",
                        "██████    ",
                        "  ██  ██  ",
                        "          "
                ), Transform.or(Sprite.of(
                        "          ",
                        "  ██  ██  ",
                        "    ██    ",
                        "  ██  ██  ",
                        "          "), Sprite.of(
                        "██████    ",
                        "██████    ",
                        "██████    ",
                        "          ",
                        "          ")
                )
        );
    }

    @Test
    void xor() {
        assertSprite(
                Sprite.of(
                        "            ",
                        "  ██████    ",
                        "  ██  ████  ",
                        "  ████      ",
                        "    ██  ██  ",
                        "            "
                ), Transform.xor(Sprite.of(
                        "            ",
                        "            ",
                        "    ██  ██  ",
                        "      ██    ",
                        "    ██  ██  ",
                        "            "), Sprite.of(
                        "            ",
                        "  ██████    ",
                        "  ██████    ",
                        "  ██████    ",
                        "            ",
                        "            ")
                )
        );
    }

    @Test
    void not() {
        assertSprite(
                Sprite.of(
                        "██████████",
                        "██  ██  ██",
                        "████  ████",
                        "██  ██  ██",
                        "██████████"
                ), Transform.not(Sprite.of(
                        "          ",
                        "  ██  ██  ",
                        "    ██    ",
                        "  ██  ██  ",
                        "          ")
                )
        );
    }

    @Test
    void bold() {
        assertSprite(
                Sprite.of(
                        "              ",
                        "  ██████      ",
                        "  ████████    ",
                        "  ██████████  ",
                        "    ████████  ",
                        "      ██████  ",
                        "              "
                ), Transform.bold(Sprite.of(
                        "              ",
                        "              ",
                        "    ██        ",
                        "      ██      ",
                        "        ██    ",
                        "              ",
                        "              ")
                )
        );
    }

    @Test
    void composition() {
        Sprite dpad = Sprite.of(
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                      ████                      ",
                "                                      ████                      ",
                "                                ████████                        ",
                "                              ████                              ",
                "                              ████                              ",
                "                  ██████████  ████  ██████████                  ",
                "              ████████████████████████████████████              ",
                "              ████████  ██████████████████████████              ",
                "            ████████      ████████████████    ██████            ",
                "            ██████  ██  ██  ██████████████    ██████            ",
                "            ████      ██      ██████████████████████            ",
                "            ██████  ██  ██  ████████    ████████████            ",
                "            ████████      ██████████    ████████████            ",
                "              ████████  ██████████████████████████              ",
                "              ████████████████████████████████████              ",
                "                  ██████████        ██████████                  ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                ",
                "                                                                "
        );


        Sprite not = Sprite.of(
                "                                        ",
                "  ████                                  ",
                "  ██████                                ",
                "    ██████                              ",
                "      ██████                            ",
                "        ██████                          ",
                "          ██████                        ",
                "            ██████                      ",
                "              ██████                    ",
                "                ██████                  ",
                "                  ██████                ",
                "                    ██████              ",
                "                      ██████            ",
                "                        ██████          ",
                "                          ██████        ",
                "                            ██████      ",
                "                              ██████    ",
                "                                ██████  ",
                "                                  ████  ",
                "                                        "
        ).at(6, 6);

        Sprite selected = Sprite.of(
                "                                                                ",
                "                                                                ",
                "      ████████████████████████████████████████████████████      ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "      ████████████████████████████████████████████████████      ",
                "                                                                ",
                "                                                                "
        );


        assertSprite(Sprite.of(
                "                                                                ",
                "                                                                ",
                "      ████████████████████████████████████████████████████      ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ██████████████████████████████████    ██████████████████    ",
                "    ██████████    ████████████████████    ██████████████████    ",
                "    ██████████      ████████████        ████████████████████    ",
                "    ████████████      ████████    ██████████████████████████    ",
                "    ██████████████      ██████    ██████████████████████████    ",
                "    ████████████████      ████    ██          ██████████████    ",
                "    ██████████    ████      ████                  ██████████    ",
                "    ██████████      ████      ████                ██████████    ",
                "    ████████        ██████      ████      ████      ████████    ",
                "    ████████      ██  ██████      ████    ████      ████████    ",
                "    ████████    ██████  ██████      ████            ████████    ",
                "    ████████      ██  ██  ██████      ████          ████████    ",
                "    ████████        ██████    ████      ████        ████████    ",
                "    ██████████        ██        ████      ████    ██████████    ",
                "    ██████████                    ████      ████  ██████████    ",
                "    ██████████████          ████████████      ██████████████    ",
                "    ██████████████████████████████████████      ████████████    ",
                "    ████████████████████████████████████████      ██████████    ",
                "    ██████████████████████████████████████████    ██████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "    ████████████████████████████████████████████████████████    ",
                "      ████████████████████████████████████████████████████      ",
                "                                                                ",
                "                                                                "),
                     dpad.with(not).xor(selected)
        );

    }


    void assertSprite(Sprite expected, Sprite sprite) {
        for (int x = 0; x < expected.width(); x++)
            for (int y = 0; y < expected.height(); y++)
                Assertions.assertEquals(expected.pixel(x, y), sprite.pixel(x, y));
    }
}
